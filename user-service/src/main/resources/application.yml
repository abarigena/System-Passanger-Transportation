spring:
  application:
    name: user-service
  config:
    import: "optional:configserver:http://localhost:8887"
  cloud:
    config:
      fail-fast: true
  datasource:
    url: jdbc:postgresql://localhost:5433/userDb
    username: ${DB_USERNAME}
    password: ${DB_PASSWORD}
    driver-class-name: org.postgresql.Driver
  jpa:
    hibernate:
      ddl-auto: update # или validate/none
    properties:
      hibernate:
        dialect: org.hibernate.dialect.PostgreSQLDialect
    show-sql: true
  kafka:
    bootstrap-servers: localhost:19092 # Используем порт для внешнего доступа к Kafka в Docker
    # --- Consumer ---
    consumer:
      group-id: user-service-group # Группа консьюмеров для User Service
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.springframework.kafka.support.serializer.JsonDeserializer
      properties:
        spring.json.trusted.packages: "com.abarigena.dto.kafka"  # Доверяем пакетам DTO
        spring.json.use.type.headers: true
      auto-offset-reset: earliest

    producer:
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.springframework.kafka.support.serializer.JsonSerializer
    topic:
      user-registered: auth-events
      user-profile-updated: user-profile-events
      user-contact-verified: user-profile-events
server:
  port: 8001